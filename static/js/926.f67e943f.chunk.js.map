{"version":3,"file":"static/js/926.f67e943f.chunk.js","mappings":"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","sources":["components/loading/LoadingSkeleTon.js","components/movies/MovieCard.js","hooks/useDebounce.js","components/movies/MovieCardList.js","page/MoviePage.js"],"sourcesContent":["import React from \"react\";\r\nimport { withErrorBoundary } from \"react-error-boundary\";\r\nimport { ErrorComponent } from \"hooks/ErrorComponent\";\r\n\r\nconst LoadingSkeleTon = (props) => {\r\n  return (\r\n    <div\r\n      className={`skeleton ${props.className}`}\r\n      style={{\r\n        height: props.height,\r\n        width: props.width || \"100%\",\r\n        borderRadius: props.radius,\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default withErrorBoundary(LoadingSkeleTon, {\r\n  FallbackComponent: ErrorComponent,\r\n});\r\n","import LoadingSkeleTon from \"components/loading/LoadingSkeleTon\";\r\nimport React from \"react\";\r\nimport { BsPlayCircleFill } from \"react-icons/bs\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { tmdbAPI } from \"../../config\";\r\nimport Button from \"../button/Button\";\r\n\r\nconst MovieCard = ({ item }) => {\r\n  const { title, vote_average, poster_path, release_date, id } = item;\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div className=\"flex flex-col h-full p-3 text-white rounded-lg select-none movie-card bg-slate-800\">\r\n      <div className=\"film__item--img\">\r\n        <img\r\n          src={tmdbAPI.image500(poster_path)}\r\n          alt=\"poster-film\"\r\n          className=\"w-full h-[350px] object-fill rounded-lg cursor-pointer\"\r\n          onClick={() => navigate(`/movie/${id}`)}\r\n        />\r\n      </div>\r\n      <div className=\"flex flex-col flex-1\">\r\n        <h3\r\n          className=\"mt-3 mb-3 text-xl font-bold cursor-pointer hover:underline movie-card--title\"\r\n          onClick={() => navigate(`/movie/${id}`)}\r\n        >\r\n          {title}\r\n        </h3>\r\n        <div className=\"flex items-center justify-between mb-6 text-sm movie-card--content\">\r\n          <div className=\"opacity-50\">\r\n            <span>{new Date(release_date).getFullYear()}</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-x-2\">\r\n            <span className=\"opacity-50\">\r\n              {parseFloat(vote_average).toFixed(1)}\r\n            </span>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"#F5B50A\"\r\n              className=\"w-6 h-6 mr-3\"\r\n            >\r\n              <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z\"\r\n                clipRule=\"evenodd\"\r\n              />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n        <Button\r\n          bgColor=\"primary\"\r\n          className=\"flex items-center justify-center text-xl font-bold gap-x-2 btn-movie--detail\"\r\n          onClick={() => navigate(`/movie/${id}`)}\r\n        >\r\n          Watch Now\r\n          <BsPlayCircleFill size={25}></BsPlayCircleFill>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const MovieSkeleton = () => {\r\n  return (\r\n    <div className=\"flex flex-col h-full p-3 text-white rounded-lg select-none movie-card bg-slate-800\">\r\n      <LoadingSkeleTon\r\n        width=\"100%\"\r\n        height=\"250px\"\r\n        radius=\"8px\"\r\n        className=\"mb-5\"\r\n      ></LoadingSkeleTon>\r\n      <div className=\"flex flex-col flex-1\">\r\n        <h3 className=\"mt-3 mb-3 text-xl font-bold \">\r\n          <LoadingSkeleTon width=\"100%\" height=\"20px\"></LoadingSkeleTon>\r\n        </h3>\r\n        <div className=\"flex items-center justify-between mb-10 text-sm opacity-50\">\r\n          <span>\r\n            <LoadingSkeleTon width=\"50px\" height=\"10px\"></LoadingSkeleTon>\r\n          </span>\r\n          <span>\r\n            <LoadingSkeleTon width=\"30px\" height=\"10px\"></LoadingSkeleTon>\r\n          </span>\r\n        </div>\r\n        <LoadingSkeleTon\r\n          width=\"100%\"\r\n          height=\"45px\"\r\n          radius=\"6px\"\r\n        ></LoadingSkeleTon>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default function useDebounce(initializeValue = \"\", delay = 1000) {\r\n  const [debounceValue, setDebounceValue] = useState(initializeValue);\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setDebounceValue(initializeValue);\r\n    }, delay);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [delay, initializeValue]);\r\n  return debounceValue;\r\n}\r\n","import LoadingSkeleTon from \"components/loading/LoadingSkeleTon\";\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { tmdbAPI } from \"../../config\";\r\nimport Zoom from \"react-reveal/Zoom\";\r\nimport { useEffect } from \"react\";\r\nconst MovieCardList = ({ item }) => {\r\n  /**Scroll To Top */\r\n  useEffect(() => {\r\n    const body = document.querySelector(\"#root\");\r\n\r\n    body.scrollIntoView(\r\n      {\r\n        behavior: \"smooth\",\r\n      },\r\n      0\r\n    );\r\n  }, []);\r\n  const { title, vote_average, poster_path, id } = item;\r\n  const navigate = useNavigate();\r\n  return (\r\n    <>\r\n      <Zoom>\r\n        <div className=\"lists__all--items\">\r\n          {/*  */}\r\n          <div className=\"mx-4 film--item\">\r\n            <div className=\"film--item-img \">\r\n              <span className=\"film--item-status\">HD Vietsub</span>\r\n\r\n              <img\r\n                src={tmdbAPI.image500(poster_path)}\r\n                onClick={() => navigate(`/movie/${id}`)}\r\n                alt=\"\"\r\n              ></img>\r\n            </div>\r\n            <div className=\"film--item-content\">\r\n              <div className=\"flex items-center mt-4 text-gray-400\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"#F5B50A\"\r\n                  className=\"w-6 h-6\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z\"\r\n                    clipRule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n                <span className=\"!text-white !text-lg\">{vote_average} </span>/10\r\n              </div>\r\n              <h6\r\n                className=\"item--content-h6\"\r\n                onClick={() => navigate(`/movie/${id}`)}\r\n              >\r\n                {title}\r\n              </h6>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Zoom>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const MovieSkeleton = () => {\r\n  return (\r\n    <div className=\"flex flex-col h-full p-3 text-white rounded-lg select-none movie-card bg-slate-800\">\r\n      <LoadingSkeleTon\r\n        width=\"100%\"\r\n        height=\"250px\"\r\n        radius=\"8px\"\r\n        className=\"mb-5\"\r\n      ></LoadingSkeleTon>\r\n      <div className=\"flex flex-col flex-1\">\r\n        <h3 className=\"mt-3 mb-3 text-xl font-bold \">\r\n          <LoadingSkeleTon width=\"100%\" height=\"20px\"></LoadingSkeleTon>\r\n        </h3>\r\n        <div className=\"flex items-center justify-between mb-10 text-sm opacity-50\">\r\n          <span>\r\n            <LoadingSkeleTon width=\"50px\" height=\"10px\"></LoadingSkeleTon>\r\n          </span>\r\n          <span>\r\n            <LoadingSkeleTon width=\"30px\" height=\"10px\"></LoadingSkeleTon>\r\n          </span>\r\n        </div>\r\n        <LoadingSkeleTon\r\n          width=\"100%\"\r\n          height=\"45px\"\r\n          radius=\"6px\"\r\n        ></LoadingSkeleTon>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCardList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport useSWR from \"swr\";\r\nimport { MovieSkeleton } from \"../components/movies/MovieCard\";\r\nimport { fetcher, tmdbAPI } from \"../config\";\r\nimport useDebounce from \"../hooks/useDebounce\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { v4 } from \"uuid\";\r\nimport MovieCardList from \"components/movies/MovieCardList\";\r\nimport ScrollToTop from \"react-scroll-to-top\";\r\n\r\nconst itemsPerPage = 20;\r\nconst MoviePage = () => {\r\n  /**Scroll To Top */\r\n  useEffect(() => {\r\n    const body = document.querySelector(\"#root\");\r\n\r\n    body.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  }, []);\r\n  const [nextPage, setNextPage] = useState(1);\r\n  const [filter, setFilter] = useState(\"\");\r\n  const [url, setUrl] = useState(tmdbAPI.getMovieList(\"popular\", nextPage));\r\n  const filterDebounce = useDebounce(filter, 500);\r\n  const handleFilterChange = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n  const { data, error } = useSWR(url, fetcher);\r\n  const loading = !data && !error;\r\n  useEffect(() => {\r\n    if (filterDebounce) {\r\n      setUrl(tmdbAPI.getMovieSearch(filterDebounce, nextPage));\r\n    } else {\r\n      setUrl(tmdbAPI.getMovieList(\"popular\", nextPage));\r\n    }\r\n  }, [filterDebounce, nextPage]);\r\n\r\n  const movies = data?.results || [];\r\n\r\n  /** */\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!data || !data.total_results) return;\r\n    // Fetch items from another resources.\r\n    setPageCount(Math.ceil(data.total_results / itemsPerPage));\r\n  }, [data, itemOffset]);\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    const newOffset = (event.selected * itemsPerPage) % data.total_results;\r\n\r\n    setItemOffset(newOffset);\r\n    setNextPage(event.selected + 1);\r\n  };\r\n\r\n  // if (!data) return null;\r\n  // const { page, total_pages } = data;\r\n  return (\r\n    <>\r\n      <div className=\"select-none py-28 page-container wrapp-list--page\">\r\n        <div className=\"flex mb-10 wrapp-search\">\r\n          <div className=\"flex-1 search\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"w-full p-4 text-white outline-none bg-slate-800 rounded-xl\"\r\n              placeholder=\"Type here to search...\"\r\n              onChange={handleFilterChange}\r\n            />\r\n          </div>\r\n          <button className=\"p-4 text-white rounded-lg bg-primary\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"currentColor\"\r\n              className=\"w-6 h-6\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <h2 className=\"mb-5 text-3xl font-bold text-white capitalize lists__film--head\">\r\n          All films\r\n        </h2>\r\n\r\n        {loading && (\r\n          <div className=\"grid grid-cols-4 gap-10 wrapp-list--item\">\r\n            {new Array(itemsPerPage).fill(0).map(() => (\r\n              <MovieSkeleton key={v4()}></MovieSkeleton>\r\n            ))}\r\n          </div>\r\n        )}\r\n        <div className=\"grid grid-cols-4 gap-10 wrapp-list--item\">\r\n          {!loading &&\r\n            movies.length > 0 &&\r\n            movies.map((item) => (\r\n              <MovieCardList key={item.id} item={item}></MovieCardList>\r\n            ))}\r\n        </div>\r\n\r\n        <div className=\"mt-20 wrapp-pagination\">\r\n          <ReactPaginate\r\n            breakLabel=\"...\"\r\n            nextLabel=\"next >\"\r\n            onPageChange={handlePageClick}\r\n            pageRangeDisplayed={5}\r\n            pageCount={pageCount}\r\n            previousLabel=\"< previous\"\r\n            renderOnZeroPageCount={null}\r\n            className=\"pagination\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <ScrollToTop smooth className=\"pl-[6px]\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n"],"names":["withErrorBoundary","props","className","style","height","width","borderRadius","radius","FallbackComponent","ErrorComponent","MovieSkeleton","item","title","vote_average","poster_path","release_date","id","navigate","useNavigate","src","tmdbAPI","alt","onClick","Date","getFullYear","parseFloat","toFixed","xmlns","viewBox","fill","fillRule","d","clipRule","bgColor","size","useDebounce","initializeValue","delay","useState","debounceValue","setDebounceValue","useEffect","timer","setTimeout","clearTimeout","document","querySelector","scrollIntoView","behavior","nextPage","setNextPage","filter","setFilter","url","setUrl","filterDebounce","useSWR","fetcher","data","error","loading","movies","results","pageCount","setPageCount","itemOffset","setItemOffset","total_results","Math","ceil","type","placeholder","onChange","e","target","value","strokeWidth","stroke","strokeLinecap","strokeLinejoin","Array","map","v4","length","breakLabel","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","smooth"],"sourceRoot":""}